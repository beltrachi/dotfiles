;;; Package manager setup
(require 'package)
(add-to-list 'package-archives 
    '("marmalade" .
      "http://marmalade-repo.org/packages/"))
(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)
(package-initialize)

;;; Install required packages
(when (not package-archive-contents)
  (package-refresh-contents))

;; http://stackoverflow.com/questions/7302771/dotfiles-repository-switching-from-per-package-git-submodules-to-elpa-while-mai
(defvar prelude-packages
  '(flx-ido clojure-mode coffee-mode deft gist haml-mode
                 haskell-mode magit markdown-mode paredit sass-mode scss-mode
                 yaml-mode yari yasnippet color-theme color-theme-solarized
                 helm fiplr diff-hl yard-mode column-marker yasnippet ruby-block)
  "A list of packages to ensure are installed at launch.")

(dolist (p prelude-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; For textmate like file search together
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

;; General config
(size-indication-mode t) ;; Show file size along with file position
(line-number-mode t)	 ;; Show file position in (row, col) format
(column-number-mode t)	 ;; ''
(display-time-mode)      ;; Show current time in status line
(setq-default indent-tabs-mode nil ;; Insert tabs as spaces (not tabs)
	      indicate-buffer-boundaries 'left	;; Graphical gimmick
	      indicate-empty-lines t	;; Graphical gimmick
	      show-trailing-whitespace t
	      initial-major-mode 'text-mode
	      default-major-mode 'text-mode)

;; Ugly patch to make color-theme-solarized emacs24 comaptible
(defun plist-to-alist (the-plist)
  (defun get-tuple-from-plist (the-plist)
    (when the-plist
      (cons (car the-plist) (cadr the-plist))))

  (let ((alist '()))
    (while the-plist
      (add-to-list 'alist (get-tuple-from-plist the-plist))
      (setq the-plist (cddr the-plist)))
  alist))

;; Themes
(require 'color-theme-solarized)
(color-theme-solarized-dark)

;; Smart file open hotkey - fiplr
(global-set-key (kbd "M-p") 'fiplr-find-file)

;; Backup config
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
(setq auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t)))
;; Do not add newlines at the end!
(setq require-final-newline nil) 
(setq mode-require-final-newline nil)

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

;; No lock files. Useless if you edit with other editors or so.
;; for emacs >= 24.3
(setq create-lockfiles nil)

;; Helm setup
(helm-mode 1)

;; Yard setting
(add-hook 'ruby-mode-hook 'yard-mode)

;; Diff hl config
(setq global-diff-hl-mode t)
(setq diff-hl-mode t)


(setq-default indent-tabs-mode nil)

;; Markdown
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . gfm-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;'(custom-enabled-themes (quote (deeper-blue)))
 ;'(default-frame-alist (quote ((height . 70) (width . 120))))
 '(markdown-command "redcarpet")
 ;'(markdown-open-command "/Users/loeffler/bin/mark")
)

;; Ruby settings
(add-to-list 'auto-mode-alist '("\\.rep\\'" . ruby-mode))

;; Column marker
(require 'column-marker)
(set-face-background 'column-marker-1 "yellow")
(dolist (hook '(emacs-lisp-mode-hook
                cperl-mode-hook
                shell-mode-hook
                text-mode-hook
                change-log-mode-hook
                makefile-mode-hook
                message-mode-hook
                ruby-mode-hook
                texinfo-mode-hook))
  (add-hook hook (lambda ()
                   (interactive)
                   (column-marker-1 81))))

;; Adapt font size to window size
(defun fontify-frame (frame)
  (interactive)
  (if window-system
      (progn
        (if (> (x-display-pixel-width) 1400)
            () ;; Leave as is
         (set-frame-parameter frame 'font "Monospace 9")))))

;; Fontify current frame
(fontify-frame nil)

;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)

;; Hide toolbar
(tool-bar-mode -1)

;;Yasnippet config
(require 'yasnippet)
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/.emacs.d/snippets")))

(yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.

;; Ruby-block settings
(require 'ruby-block)
(ruby-block-mode t)

;; do overlay
(setq ruby-block-highlight-toggle 'overlay)
;; display to minibuffer
(setq ruby-block-highlight-toggle 'minibuffer)
;; display to minibuffer and do overlay
(setq ruby-block-highlight-toggle t)

