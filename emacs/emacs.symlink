;;; Package manager setup
(package-initialize)

(add-to-list 'package-archives
  '("melpa" . "http://melpa.milkbox.net/packages/") t)

;;; Install required packages
(when (not package-archive-contents)
  (package-refresh-contents))

;; http://stackoverflow.com/questions/7302771/dotfiles-repository-switching-from-per-package-git-submodules-to-elpa-while-mai
(defvar prelude-packages
  '(flx-ido clojure-mode coffee-mode deft gist haml-mode
                 haskell-mode magit markdown-mode paredit sass-mode scss-mode
                 yaml-mode yafolding yari yasnippet solarized-theme
                 helm fiplr diff-hl yard-mode column-enforce-mode yasnippet ruby-block
                 flycheck rubocop guru-mode projectile multiple-cursors lua-mode)
  "A list of packages to ensure are installed at launch.")

(dolist (p prelude-packages)
  (when (not (package-installed-p p))
    (package-install p)))

;; For textmate like file search together
(require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
;; disable ido faces to see flx highlights.
(setq ido-use-faces nil)

;; Switch alt and ctrl keys for ubuntu mac-erized
(if (eq system-type 'gnu/linux)
    (progn
      (setq x-ctrl-keysym 'meta)
      (setq x-meta-keysym 'ctrl)))

;; General config
(size-indication-mode t) ;; Show file size along with file position
(line-number-mode t)	 ;; Show file position in (row, col) format
(column-number-mode t)	 ;; ''
(display-time-mode)      ;; Show current time in status line
(setq-default indent-tabs-mode nil ;; Insert tabs as spaces (not tabs)
	      indicate-buffer-boundaries 'left	;; Graphical gimmick
	      indicate-empty-lines t	;; Graphical gimmick
	      show-trailing-whitespace t
	      initial-major-mode 'text-mode
	      default-major-mode 'text-mode)

;; Javascript indentation to 2 spaces
(setq js-indent-level 2)

;; load theme
(load-theme 'solarized-dark t)

;; Projectile
(projectile-global-mode)
(setq projectile-indexing-method 'find)
(setq projectile-use-git-grep nil)
(global-set-key (kbd "M-p") 'projectile-find-file)

;; Backup config
(setq
   backup-by-copying t      ; don't clobber symlinks
   backup-directory-alist
    '(("." . "~/.saves"))    ; don't litter my fs tree
   delete-old-versions t
   kept-new-versions 6
   kept-old-versions 2
   version-control t)       ; use versioned backups
(setq auto-save-file-name-transforms
   `((".*" ,temporary-file-directory t)))
;; Do not add newlines at the end!
(setq require-final-newline nil)
(setq mode-require-final-newline nil)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(inhibit-startup-screen t)
 '(js-indent-level 2)
 '(markdown-command "redcarpet")
 '(package-selected-packages
   '(clojure-mode coffee-mode column-marker deft diff-hl elixir-mode elixir-yasnippets erlang fiplr flx-ido flycheck flycheck-elixir gist guru-mode haml-mode haskell-mode helm json-reformat magit markdown-mode paredit projectile rubocop ruby-block sass-mode scss-mode solarized-theme sort-words yaml-mode yard-mode yari yasnippet)))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )

;; No lock files. Useless if you edit with other editors or so.
;; for emacs >= 24.3
(setq create-lockfiles nil)

;; Helm setup
(helm-mode 1)

;; Yard setting
(add-hook 'ruby-mode-hook 'yard-mode)

;; Diff hl config
(global-diff-hl-mode t)
;(setq diff-hl-mode t)
(diff-hl-margin-mode t)

(setq-default indent-tabs-mode nil)

;; Markdown
(autoload 'markdown-mode "markdown-mode"
   "Major mode for editing Markdown files" t)
(add-to-list 'auto-mode-alist '("\\.text\\'" . markdown-mode))
(add-to-list 'auto-mode-alist '("\\.markdown\\'" . gfm-mode))
(add-to-list 'auto-mode-alist '("\\.md\\'" . gfm-mode))
(add-to-list 'auto-mode-alist '("README\\.md\\'" . gfm-mode))


;; Ruby settings
(add-to-list 'auto-mode-alist '("\\.rep\\'" . ruby-mode))

;; Column enforce
(global-column-enforce-mode t)
(setq column-enforce-column 90)

;; Adapt font size to window size
(defun fontify-frame (frame)
  (interactive)
  (if window-system
      (progn
        (if (> (x-display-pixel-width) 1400)
            (set-frame-parameter frame 'font "Monospace 10")
         (set-frame-parameter frame 'font "Monospace 10")))))

;; Fontify current frame
(fontify-frame nil)

;; Fontify any future frames
(push 'fontify-frame after-make-frame-functions)

;; Hide toolbar
(tool-bar-mode -1)

;;Yasnippet config
(require 'yasnippet)
(setq yas-snippet-dirs (append yas-snippet-dirs
                               '("~/.emacs.d/snippets")))

(yas-global-mode 1) ;; or M-x yas-reload-all if you've started YASnippet already.

;; Ruby-block settings
(require 'ruby-block)
(ruby-block-mode t)

(require 'yafolding)
(add-hook 'ruby-mode-hook 'yafolding-mode)

(global-set-key (kbd "M-RET")   'yafolding-toggle-element)

;; do overlay
(setq ruby-block-highlight-toggle 'overlay)
;; display to minibuffer
(setq ruby-block-highlight-toggle 'minibuffer)
;; display to minibuffer and do overlay
(setq ruby-block-highlight-toggle t)

;; window navigation
(global-set-key [s-left] 'windmove-left)
(global-set-key [s-right] 'windmove-right)
(global-set-key [s-up] 'windmove-up)
(global-set-key [s-down] 'windmove-down)

;; flycheck and rubocop config
(global-flycheck-mode t)

(setq js-indent-level 4)

;; Stop inserting encoding utf on ruby
(setq ruby-insert-encoding-magic-comment nil)

(put 'upcase-region 'disabled nil)

; ;; Custom setup for macOS
; (if
;  (string-equal system-type "darwin")
;  (setq mac-option-modifier nil
;         mac-command-modifier 'super
;         mac-option-modifier 'meta
;         x-select-enable-clipboard t))

(setq mac-option-key-is-meta nil)
    (setq mac-command-key-is-meta t)
    (setq mac-command-modifier 'meta)
    (setq mac-option-modifier nil)

;; multiple-cursors
(global-set-key (kbd "C->")         'mc/mark-next-like-this)
(global-set-key (kbd "C-<")         'mc/mark-previous-like-this)
(global-set-key (kbd "C-c C-<")     'mc/mark-all-like-this)
(global-set-key (kbd "s-SPC")       'set-rectangular-region-anchor)
(global-set-key (kbd "H-SPC")       'set-rectangular-region-anchor)
